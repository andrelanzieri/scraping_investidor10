import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import pandas as pd
import json
import threading
from datetime import datetime
import re

try:
    import google.generativeai as genai
    GENAI_AVAILABLE = True
except ImportError:
    GENAI_AVAILABLE = False
    genai = None

class DataViewer:
    """
    Tela para visualizar dados exportados e interagir com IA Google Gemini.
    """

    def __init__(self, parent, df_acoes, config, df_fiis=None, df_carteiras_acoes=None, df_carteiras_fiis=None):
        """
        Inicializa o visualizador de dados.

        Args:
            parent: Widget pai (janela principal)
            df_acoes: DataFrame com dados das a√ß√µes
            config: Configura√ß√µes da aplica√ß√£o
            df_fiis: DataFrame com dados dos FIIs (opcional)
            df_carteiras_acoes: DataFrame com dados da carteira de a√ß√µes (opcional)
            df_carteiras_fiis: DataFrame com dados da carteira de FIIs (opcional)
        """
        self.parent = parent
        self.df_acoes = df_acoes
        self.df_fiis = df_fiis if df_fiis is not None else pd.DataFrame()
        self.df_carteiras_acoes = df_carteiras_acoes if df_carteiras_acoes is not None else pd.DataFrame()
        self.df_carteiras_fiis = df_carteiras_fiis if df_carteiras_fiis is not None else pd.DataFrame()
        self.config = config
        self.ai_configured = False

        # Configurar tema baseado na configura√ß√£o
        self.tema_escuro = config.get("tema", "escuro") == "escuro"
        self._aplicar_tema()

        # Inicializar IA se configurada
        self._init_ai()

        # Criar janela
        self.criar_janela()

    def _aplicar_tema(self):
        """Aplica o tema claro ou escuro."""
        if self.tema_escuro:
            self.cor_fundo = "#0f1419"
            self.cor_fundo_secundario = "#1a1f26"
            self.cor_fundo_terciario = "#252d38"
            self.cor_texto = "#e8eaed"
            self.cor_texto_secundario = "#9aa0a6"
            self.cor_botao = "#2d3748"
            self.cor_botao_ativo = "#3182ce"
            self.cor_entrada = "#1e2a38"
            self.cor_destaque = "#3b82f6"
            self.cor_sucesso = "#10b981"
            self.cor_aviso = "#f59e0b"
            self.cor_erro = "#ef4444"
        else:
            self.cor_fundo = "#f8fafc"
            self.cor_fundo_secundario = "#ffffff"
            self.cor_fundo_terciario = "#f1f5f9"
            self.cor_texto = "#1e293b"
            self.cor_texto_secundario = "#64748b"
            self.cor_botao = "#e2e8f0"
            self.cor_botao_ativo = "#3b82f6"
            self.cor_entrada = "#ffffff"
            self.cor_destaque = "#3b82f6"
            self.cor_sucesso = "#10b981"
            self.cor_aviso = "#f59e0b"
            self.cor_erro = "#ef4444"

    def _init_ai(self):
        """Inicializa a IA Google Gemini se configurada."""
        if not GENAI_AVAILABLE:
            self.ai_configured = False
            return

        api_key = self.config.get("gemini_api_key", "")
        if api_key:
            try:
                genai.configure(api_key=api_key)
                self.model = genai.GenerativeModel('gemini-2.5-pro')
                self.ai_configured = True
            except Exception as e:
                print(f"Erro ao configurar IA: {e}")
                self.ai_configured = False
        else:
            self.ai_configured = False

    def criar_janela(self):
        """Cria a janela principal do visualizador."""
        self.window = tk.Toplevel(self.parent)
        self.window.title("üìä Visualizador de Dados e IA")
        self.window.geometry("1400x800")
        self.window.configure(bg=self.cor_fundo)

        # Centralizar janela
        self.window.transient(self.parent)
        self.window.grab_set()

        # Criar notebook com abas
        self.notebook = ttk.Notebook(self.window)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Aba de dados
        self.criar_aba_dados()

        # Aba de IA
        self.criar_aba_ia()

        # Aba de configura√ß√µes da IA
        self.criar_aba_config_ia()

    def criar_aba_dados(self):
        """Cria a aba de visualiza√ß√£o de dados."""
        frame_dados = ttk.Frame(self.notebook)
        self.notebook.add(frame_dados, text="üìà Dados Exportados")

        # Frame principal
        main_frame = tk.Frame(frame_dados, bg=self.cor_fundo_secundario)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # T√≠tulo
        titulo = tk.Label(main_frame, text="üìä Dados Exportados",
                         font=("Segoe UI", 16, "bold"),
                         bg=self.cor_fundo_secundario, fg=self.cor_texto)
        titulo.pack(pady=(0, 20))

        # Notebook para separar a√ß√µes e carteiras
        dados_notebook = ttk.Notebook(main_frame)
        dados_notebook.pack(fill=tk.BOTH, expand=True)

        # Aba de a√ß√µes
        if not self.df_acoes.empty:
            frame_acoes = ttk.Frame(dados_notebook)
            dados_notebook.add(frame_acoes, text=f"üìà A√ß√µes ({len(self.df_acoes)} registros)")
            self.criar_tabela_dados(frame_acoes, self.df_acoes)

        # Aba de FIIs
        if not self.df_fiis.empty:
            frame_fiis = ttk.Frame(dados_notebook)
            dados_notebook.add(frame_fiis, text=f"üè¢ FIIs ({len(self.df_fiis)} registros)")
            self.criar_tabela_dados(frame_fiis, self.df_fiis)

        # Aba de carteira de a√ß√µes
        if not self.df_carteiras_acoes.empty:
            frame_carteiras_acoes = ttk.Frame(dados_notebook)
            dados_notebook.add(frame_carteiras_acoes, text=f"üíº Carteira A√ß√µes ({len(self.df_carteiras_acoes)} registros)")
            self.criar_tabela_dados(frame_carteiras_acoes, self.df_carteiras_acoes)

        # Aba de carteira de FIIs
        if not self.df_carteiras_fiis.empty:
            frame_carteiras_fiis = ttk.Frame(dados_notebook)
            dados_notebook.add(frame_carteiras_fiis, text=f"üè¢ Carteira FIIs ({len(self.df_carteiras_fiis)} registros)")
            self.criar_tabela_dados(frame_carteiras_fiis, self.df_carteiras_fiis)

        # Estat√≠sticas gerais
        self.criar_estatisticas(main_frame)

    def criar_tabela_dados(self, parent, df):
        """Cria uma tabela para exibir os dados."""
        # Frame para a tabela
        frame_tabela = tk.Frame(parent, bg=self.cor_fundo_secundario)
        frame_tabela.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Criar Treeview
        colunas = list(df.columns)
        tree = ttk.Treeview(frame_tabela, columns=colunas, show="headings", height=15)

        # Configurar cabe√ßalhos
        for col in colunas:
            tree.heading(col, text=col)
            tree.column(col, width=120, minwidth=80)

        # Adicionar dados
        for index, row in df.iterrows():
            tree.insert("", tk.END, values=list(row))

        # Scrollbars
        scrollbar_v = ttk.Scrollbar(frame_tabela, orient=tk.VERTICAL, command=tree.yview)
        scrollbar_h = ttk.Scrollbar(frame_tabela, orient=tk.HORIZONTAL, command=tree.xview)
        tree.configure(yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)

        # Layout
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_v.pack(side=tk.RIGHT, fill=tk.Y)
        scrollbar_h.pack(side=tk.BOTTOM, fill=tk.X)

    def criar_estatisticas(self, parent):
        """Cria um resumo estat√≠stico dos dados."""
        frame_stats = tk.LabelFrame(parent, text="üìä Estat√≠sticas",
                                   bg=self.cor_fundo_secundario, fg=self.cor_texto,
                                   font=("Segoe UI", 12, "bold"))
        frame_stats.pack(fill=tk.X, pady=(20, 0))

        # Texto com estat√≠sticas
        stats_text = tk.Text(frame_stats, height=6, width=80,
                            bg=self.cor_fundo_terciario, fg=self.cor_texto,
                            font=("Consolas", 10))
        stats_text.pack(fill=tk.X, padx=10, pady=10)

        # Gerar estat√≠sticas
        stats_info = []
        if not self.df_acoes.empty:
            stats_info.append(f"üìà A√á√ïES: {len(self.df_acoes)} registros")
            stats_info.append(f"   Colunas: {', '.join(self.df_acoes.columns[:5])}{'...' if len(self.df_acoes.columns) > 5 else ''}")

        if not self.df_fiis.empty:
            stats_info.append(f"üè¢ FIIs: {len(self.df_fiis)} registros")
            stats_info.append(f"   Colunas: {', '.join(self.df_fiis.columns[:5])}{'...' if len(self.df_fiis.columns) > 5 else ''}")



        stats_info.append(f"üìÖ Exportado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

        stats_text.insert(tk.END, "\n".join(stats_info))
        stats_text.config(state=tk.DISABLED)

    def criar_aba_ia(self):
        """Cria a aba de intera√ß√£o com IA."""
        frame_ia = ttk.Frame(self.notebook)
        self.notebook.add(frame_ia, text="ü§ñ Chat com IA")

        # Frame principal
        main_frame = tk.Frame(frame_ia, bg=self.cor_fundo_secundario)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # T√≠tulo
        titulo = tk.Label(main_frame, text="ü§ñ Chat com Google Gemini",
                         font=("Segoe UI", 16, "bold"),
                         bg=self.cor_fundo_secundario, fg=self.cor_texto)
        titulo.pack(pady=(0, 20))

        # Status da IA
        if not GENAI_AVAILABLE:
            status_text = "‚ùå Biblioteca google-generativeai n√£o instalada"
            status_color = self.cor_erro
        elif self.ai_configured:
            status_text = "‚úÖ IA Configurada"
            status_color = self.cor_sucesso
        else:
            status_text = "‚ùå IA N√£o Configurada"
            status_color = self.cor_erro

        status_label = tk.Label(main_frame, text=status_text,
                               font=("Segoe UI", 10, "bold"),
                               bg=self.cor_fundo_secundario, fg=status_color)
        status_label.pack(pady=(0, 10))

        # √Årea de chat
        chat_frame = tk.Frame(main_frame, bg=self.cor_fundo_secundario)
        chat_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        # √Årea de conversa
        self.chat_area = scrolledtext.ScrolledText(chat_frame,
                                                  bg=self.cor_fundo_terciario,
                                                  fg=self.cor_texto,
                                                  font=("Segoe UI", 10),
                                                  wrap=tk.WORD,
                                                  state=tk.DISABLED)
        self.chat_area.pack(fill=tk.BOTH, expand=True)

        # Configurar tags para formata√ß√£o markdown
        self.configurar_tags_formatacao()

        # Frame de entrada
        entrada_frame = tk.Frame(main_frame, bg=self.cor_fundo_secundario)
        entrada_frame.pack(fill=tk.X, pady=(10, 0))

        # Campo de entrada
        self.entrada_ia = tk.Entry(entrada_frame,
                                  bg=self.cor_entrada, fg=self.cor_texto,
                                  font=("Segoe UI", 10))
        self.entrada_ia.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        self.entrada_ia.bind("<Return>", self.enviar_mensagem)

        # Bot√µes
        botoes_frame = tk.Frame(entrada_frame, bg=self.cor_fundo_secundario)
        botoes_frame.pack(side=tk.RIGHT)

        # Bot√£o para enviar dados completos como CSV
        self.btn_dados_csv = tk.Button(botoes_frame, text="üìã Insights",
                                 command=self.enviar_dados_csv,
                                 bg=self.cor_botao, fg=self.cor_texto,
                                 font=("Segoe UI", 9),
                                 relief=tk.FLAT, cursor="hand2")
        self.btn_dados_csv.pack(side=tk.LEFT, padx=(0, 5))

        # Adicionar tooltip informativo
        def mostrar_info_csv():
            messagebox.showinfo("An√°lise Completa com IA",
                "üöÄ **An√°lise Financeira Completa e Estrat√©gica**\n\n" +
                "Este bot√£o ativa uma an√°lise profunda e abrangente de TODOS os seus dados:\n\n" +
                "üìä **An√°lise Fundamentalista:**\n" +
                "‚Ä¢ Valuation e atratividade de pre√ßos\n" +
                "‚Ä¢ Qualidade e rentabilidade das empresas\n" +
                "‚Ä¢ Solidez financeira e estrutura de capital\n" +
                "‚Ä¢ Pol√≠tica de dividendos e sustentabilidade\n\n" +
                "üéØ **Rankings e Recomenda√ß√µes:**\n" +
                "‚Ä¢ Top picks para diferentes perfis\n" +
                "‚Ä¢ Oportunidades de valor e crescimento\n" +
                "‚Ä¢ Red flags e riscos espec√≠ficos\n\n" +
                "üíº **Estrat√©gias de Portf√≥lio:**\n" +
                "‚Ä¢ Diversifica√ß√£o setorial otimizada\n" +
                "‚Ä¢ Estrat√©gias para diferentes objetivos\n" +
                "‚Ä¢ An√°lise de concentra√ß√£o e riscos\n\n" +
                "üîç **Insights √önicos:**\n" +
                "‚Ä¢ Correla√ß√µes e padr√µes especiais\n" +
                "‚Ä¢ An√°lise de cen√°rios e sensibilidade\n" +
                "‚Ä¢ Recomenda√ß√µes personalizadas\n\n" +
                "‚ö° **A IA combinar√° rigor t√©cnico com criatividade anal√≠tica!**")

        # Bind para mostrar info quando clicar com bot√£o direito
        self.btn_dados_csv.bind("<Button-3>", lambda e: mostrar_info_csv())

        # Bot√£o enviar
        self.btn_enviar = tk.Button(botoes_frame, text="üì§ Enviar",
                              command=self.enviar_mensagem,
                              bg=self.cor_botao_ativo, fg="white",
                              font=("Segoe UI", 10, "bold"),
                              relief=tk.FLAT, cursor="hand2")
        self.btn_enviar.pack(side=tk.LEFT)

        # Mensagem inicial
        if not GENAI_AVAILABLE:
            self.adicionar_mensagem_chat("ü§ñ IA", "A biblioteca google-generativeai n√£o est√° instalada. Execute: pip install google-generativeai", "bot")
        elif self.ai_configured:
            total_registros = len(self.df_acoes) + len(self.df_fiis) + len(self.df_carteiras_acoes) + len(self.df_carteiras_fiis)
            tipos_dados = []
            if len(self.df_acoes) > 0:
                tipos_dados.append(f"{len(self.df_acoes)} a√ß√µes")
            if len(self.df_fiis) > 0:
                tipos_dados.append(f"{len(self.df_fiis)} FIIs")
            if len(self.df_carteiras_acoes) > 0:
                tipos_dados.append(f"{len(self.df_carteiras_acoes)} itens de carteira de a√ß√µes")
            if len(self.df_carteiras_fiis) > 0:
                tipos_dados.append(f"{len(self.df_carteiras_fiis)} itens de carteira de FIIs")

            descricao_dados = ", ".join(tipos_dados[:-1]) + f" e {tipos_dados[-1]}" if len(tipos_dados) > 1 else tipos_dados[0] if tipos_dados else "nenhum dado"

            self.adicionar_mensagem_chat("ü§ñ IA", f"‚ú® **Analista Financeiro IA - Pronto para Ajudar!**\n\nüìä **Dados Dispon√≠veis:** {total_registros} registros ({descricao_dados})\n\nüéØ **O que posso fazer:**\n‚Ä¢ An√°lises fundamentalistas detalhadas\n‚Ä¢ Identifica√ß√£o de oportunidades e riscos\n‚Ä¢ Compara√ß√µes setoriais e rankings\n‚Ä¢ Estrat√©gias de portf√≥lio personalizadas\n‚Ä¢ Insights criativos e correla√ß√µes √∫nicas\n‚Ä¢ Recomenda√ß√µes baseadas nos seus dados\n‚Ä¢ An√°lises espec√≠ficas de FIIs e a√ß√µes\n\nüí° **Dicas:**\n‚Ä¢ Use o bot√£o **'üìã Insights'** para an√°lise autom√°tica completa\n‚Ä¢ Fa√ßa perguntas espec√≠ficas sobre a√ß√µes, FIIs ou setores\n‚Ä¢ Pe√ßa compara√ß√µes, rankings ou cen√°rios\n‚Ä¢ Solicite estrat√©gias para diferentes perfis de risco\n\nüöÄ **Estou aqui para ser seu consultor financeiro pessoal!**", "bot")
        else:
            self.adicionar_mensagem_chat("ü§ñ IA", "Configure sua API key do Google Gemini na aba 'Configura√ß√µes da IA' para come√ßar a usar o chat.", "bot")

    def criar_aba_config_ia(self):
        """Cria a aba de configura√ß√µes da IA."""
        frame_config = ttk.Frame(self.notebook)
        self.notebook.add(frame_config, text="‚öôÔ∏è Configura√ß√µes IA")

        # Frame principal
        main_frame = tk.Frame(frame_config, bg=self.cor_fundo_secundario)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # T√≠tulo
        titulo = tk.Label(main_frame, text="‚öôÔ∏è Configura√ß√µes da IA Google Gemini",
                         font=("Segoe UI", 16, "bold"),
                         bg=self.cor_fundo_secundario, fg=self.cor_texto)
        titulo.pack(pady=(0, 30))

        # Instru√ß√µes
        instrucoes = tk.Label(main_frame,
                             text="Para usar o chat com IA, voc√™ precisa configurar uma API key do Google Gemini.\n" +
                                  "Acesse https://aistudio.google.com/app/apikey para obter sua chave gratuita.\n\n" +
                                  "Funcionalidades da IA:\n" +
                                  "‚Ä¢ Chat interativo com TODOS os dados extra√≠dos\n" +
                                  "‚Ä¢ Bot√£o 'Insights' para an√°lise autom√°tica completa\n" +
                                  "‚Ä¢ An√°lise de tend√™ncias, compara√ß√µes e recomenda√ß√µes\n" +
                                  "‚Ä¢ Suporte a grandes volumes de dados (at√© 800k caracteres)",
                             font=("Segoe UI", 10),
                             bg=self.cor_fundo_secundario, fg=self.cor_texto_secundario,
                             wraplength=600, justify=tk.LEFT)
        instrucoes.pack(pady=(0, 20))

        # Campo para API key
        api_frame = tk.Frame(main_frame, bg=self.cor_fundo_secundario)
        api_frame.pack(fill=tk.X, pady=(0, 20))

        api_label = tk.Label(api_frame, text="API Key do Google Gemini:",
                            font=("Segoe UI", 10, "bold"),
                            bg=self.cor_fundo_secundario, fg=self.cor_texto)
        api_label.pack(anchor=tk.W)

        self.api_entry = tk.Entry(api_frame,
                                 bg=self.cor_entrada, fg=self.cor_texto,
                                 font=("Segoe UI", 10), show="*", width=60)
        self.api_entry.pack(fill=tk.X, pady=(5, 0))

        # Carregar API key se existir
        if "gemini_api_key" in self.config:
            self.api_entry.insert(0, self.config["gemini_api_key"])

        # Bot√µes
        botoes_frame = tk.Frame(main_frame, bg=self.cor_fundo_secundario)
        botoes_frame.pack(fill=tk.X, pady=(20, 0))

        btn_testar = tk.Button(botoes_frame, text="üß™ Testar Conex√£o",
                              command=self.testar_api,
                              bg=self.cor_botao, fg=self.cor_texto,
                              font=("Segoe UI", 10), relief=tk.FLAT, cursor="hand2")
        btn_testar.pack(side=tk.LEFT, padx=(0, 10))

        btn_salvar = tk.Button(botoes_frame, text="üíæ Salvar Configura√ß√µes",
                              command=self.salvar_config_ia,
                              bg=self.cor_botao_ativo, fg="white",
                              font=("Segoe UI", 10, "bold"), relief=tk.FLAT, cursor="hand2")
        btn_salvar.pack(side=tk.LEFT)

        # √Årea de status
        self.status_config = tk.Label(main_frame, text="",
                                     bg=self.cor_fundo_secundario,
                                     font=("Segoe UI", 10))
        self.status_config.pack(pady=(20, 0))

    def testar_api(self):
        """Testa a conex√£o com a API do Google Gemini."""
        api_key = self.api_entry.get().strip()
        if not api_key:
            self.status_config.config(text="‚ùå Insira uma API key", fg=self.cor_erro)
            return

        self.status_config.config(text="üîÑ Testando conex√£o...", fg=self.cor_aviso)

        def testar_thread():
            try:
                genai.configure(api_key=api_key)
                model = genai.GenerativeModel('gemini-2.5-pro')
                response = model.generate_content("Teste de conex√£o. Responda apenas: 'Conex√£o bem-sucedida!'")

                self.window.after(0, lambda: self.status_config.config(
                    text="‚úÖ Conex√£o bem-sucedida!", fg=self.cor_sucesso))

            except Exception as e:
                self.window.after(0, lambda: self.status_config.config(
                    text=f"‚ùå Erro: {str(e)}", fg=self.cor_erro))

        threading.Thread(target=testar_thread, daemon=True).start()

    def salvar_config_ia(self):
        """Salva as configura√ß√µes da IA."""
        api_key = self.api_entry.get().strip()

        # Atualizar configura√ß√£o
        self.config["gemini_api_key"] = api_key

        # Salvar no arquivo
        try:
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(self.config, f, ensure_ascii=False, indent=4)

            # Reinicializar IA
            self._init_ai()

            self.status_config.config(text="‚úÖ Configura√ß√µes salvas!", fg=self.cor_sucesso)

            # Mostrar informativo sobre seguran√ßa do config.json se a API key foi configurada
            # e o usu√°rio n√£o desativou o aviso
            if api_key and self.config.get("mostrar_aviso_seguranca", True):
                self.mostrar_informativo_seguranca()

        except Exception as e:
            self.status_config.config(text=f"‚ùå Erro ao salvar: {str(e)}", fg=self.cor_erro)

    def mostrar_informativo_seguranca(self):
        """Mostra informativo sobre seguran√ßa do arquivo config.json."""
        # Criar janela personalizada para o informativo
        janela_info = tk.Toplevel(self.window)
        janela_info.title("üîê Importante - Seguran√ßa da API Key")
        janela_info.geometry("650x500")
        janela_info.resizable(False, False)
        janela_info.configure(bg=self.cor_fundo)

        # Centralizar a janela
        janela_info.transient(self.window)
        janela_info.grab_set()

        # Calcular posi√ß√£o central
        janela_info.update_idletasks()
        x = (janela_info.winfo_screenwidth() // 2) - (650 // 2)
        y = (janela_info.winfo_screenheight() // 2) - (500 // 2)
        janela_info.geometry(f"650x500+{x}+{y}")

        # Frame principal
        frame_principal = tk.Frame(janela_info, bg=self.cor_fundo, padx=30, pady=20)
        frame_principal.pack(fill=tk.BOTH, expand=True)

        # T√≠tulo
        titulo = tk.Label(frame_principal,
                         text="üîê IMPORTANTE - Seguran√ßa da API Key",
                         font=("Segoe UI", 16, "bold"),
                         bg=self.cor_fundo, fg=self.cor_erro)
        titulo.pack(pady=(0, 20))

        # Texto do informativo
        mensagem = """‚ö†Ô∏è ATEN√á√ÉO: Sua API key do Google Gemini foi salva no arquivo config.json

üö® NUNCA COMPARTILHE ESTE ARQUIVO COM OUTRAS PESSOAS OU PUBLIQUE NO GIT!

üìã REGRAS DE SEGURAN√áA IMPORTANTES:

‚úÖ O que FAZER:
‚Ä¢ Manter o arquivo config.json apenas no seu computador
‚Ä¢ Adicionar config.json ao .gitignore se usar controle de vers√£o
‚Ä¢ Fazer backup seguro das suas configura√ß√µes
‚Ä¢ Manter sua API key privada e segura

‚ùå O que N√ÉO FAZER:
‚Ä¢ Compartilhar o arquivo config.json com terceiros
‚Ä¢ Publicar o arquivo config.json no GitHub ou outros reposit√≥rios
‚Ä¢ Enviar o arquivo por email ou mensagem
‚Ä¢ Deixar o arquivo em pastas compartilhadas

üîí MOTIVO DA SEGURAN√áA:
‚Ä¢ Sua API key √© pessoal e intransfer√≠vel
‚Ä¢ Terceiros podem usar sua API key indevidamente
‚Ä¢ Uso n√£o autorizado pode esgotar sua cota gratuita
‚Ä¢ Poss√≠vel cobran√ßa por uso excessivo por terceiros

üí° DICAS IMPORTANTES:
‚Ä¢ A API key fica salva localmente no seu computador
‚Ä¢ Nenhum dado √© enviado para outros servi√ßos al√©m do Google Gemini
‚Ä¢ Voc√™ pode regenerar sua API key no Google AI Studio se necess√°rio
‚Ä¢ Mantenha sempre suas credenciais seguras

üõ°Ô∏è LEMBRE-SE: Sua seguran√ßa digital √© responsabilidade sua!"""

        # √Årea de texto com scroll
        texto_frame = tk.Frame(frame_principal, bg=self.cor_fundo)
        texto_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))

        texto_msg = tk.Text(texto_frame,
                           wrap=tk.WORD,
                           font=("Segoe UI", 10),
                           bg=self.cor_fundo_secundario,
                           fg=self.cor_texto,
                           relief=tk.RIDGE,
                           bd=1,
                           padx=15,
                           pady=15)

        # Scrollbar para o texto
        scrollbar = tk.Scrollbar(texto_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        texto_msg.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        texto_msg.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=texto_msg.yview)

        texto_msg.insert(tk.END, mensagem)
        texto_msg.config(state=tk.DISABLED)

        # Frame para checkbox e bot√µes
        frame_inferior = tk.Frame(frame_principal, bg=self.cor_fundo)
        frame_inferior.pack(fill=tk.X, pady=(10, 0))

        # Checkbox para n√£o mostrar novamente
        self.var_nao_mostrar_seguranca = tk.BooleanVar()
        checkbox = tk.Checkbutton(frame_inferior,
                                 text="N√£o mostrar este aviso novamente",
                                 variable=self.var_nao_mostrar_seguranca,
                                 bg=self.cor_fundo,
                                 fg=self.cor_texto,
                                 font=("Segoe UI", 9),
                                 activebackground=self.cor_fundo,
                                 selectcolor=self.cor_fundo_secundario)
        checkbox.pack(side=tk.LEFT)

        # Frame para bot√µes
        frame_botoes = tk.Frame(frame_inferior, bg=self.cor_fundo)
        frame_botoes.pack(side=tk.RIGHT)

        def fechar_janela():
            # Salvar prefer√™ncia se checkbox marcado
            if self.var_nao_mostrar_seguranca.get():
                self.config["mostrar_aviso_seguranca"] = False
                try:
                    with open("config.json", "w", encoding="utf-8") as f:
                        json.dump(self.config, f, ensure_ascii=False, indent=4)
                except Exception as e:
                    print(f"Erro ao salvar prefer√™ncia: {e}")
            janela_info.destroy()

        # Bot√£o para mais informa√ß√µes
        def mostrar_mais_info():
            info_adicional = """INFORMA√á√ïES T√âCNICAS ADICIONAIS:

üîß SOBRE O ARQUIVO CONFIG.JSON:
‚Ä¢ Cont√©m todas as configura√ß√µes da aplica√ß√£o
‚Ä¢ Inclui lista de a√ß√µes, colunas personalizadas e tema
‚Ä¢ Armazena sua API key do Google Gemini
‚Ä¢ √â atualizado automaticamente quando voc√™ salva configura√ß√µes

üåê SOBRE A API KEY:
‚Ä¢ Chave √∫nica que identifica sua conta no Google Gemini
‚Ä¢ Permite acesso aos servi√ßos de IA do Google
‚Ä¢ Tem cota gratuita generosa para uso pessoal
‚Ä¢ Pode ser regenerada no Google AI Studio se comprometida

üîÑ COMO REGENERAR SUA API KEY:
1. Acesse https://aistudio.google.com/app/apikey
2. Fa√ßa login com sua conta Google
3. Revogue a API key atual (se necess√°rio)
4. Crie uma nova API key
5. Substitua no programa

‚ö†Ô∏è SINAIS DE COMPROMETIMENTO:
‚Ä¢ Uso inesperado da sua cota
‚Ä¢ Notifica√ß√µes de uso n√£o reconhecidas
‚Ä¢ Comportamento estranho na aplica√ß√£o

üÜò EM CASO DE PROBLEMAS:
‚Ä¢ Regenere imediatamente sua API key
‚Ä¢ Verifique se o arquivo config.json n√£o foi compartilhado
‚Ä¢ Entre em contato com o suporte do Google se necess√°rio"""

            messagebox.showinfo("Informa√ß√µes T√©cnicas", info_adicional)

        btn_info = tk.Button(frame_botoes,
                            text="Mais Info",
                            command=mostrar_mais_info,
                            bg=self.cor_botao,
                            fg=self.cor_texto,
                            font=("Segoe UI", 9),
                            padx=15,
                            pady=8,
                            relief=tk.FLAT,
                            cursor="hand2")
        btn_info.pack(side=tk.RIGHT, padx=(0, 10))

        # Bot√£o OK
        btn_ok = tk.Button(frame_botoes,
                          text="Entendi",
                          command=fechar_janela,
                          bg=self.cor_erro,
                          fg="white",
                          font=("Segoe UI", 10, "bold"),
                          padx=20,
                          pady=8,
                          relief=tk.FLAT,
                          cursor="hand2")
        btn_ok.pack(side=tk.RIGHT)

        # Aguardar fechamento da janela
        janela_info.wait_window()

    def enviar_mensagem(self, event=None):
        """Envia mensagem para a IA."""
        if not self.ai_configured:
            messagebox.showwarning("IA N√£o Configurada",
                                 "Configure a API key do Google Gemini primeiro.")
            return

        mensagem = self.entrada_ia.get().strip()
        if not mensagem:
            return

        # Limpar a caixa de texto ANTES de desabilitar a interface
        self.entrada_ia.delete(0, tk.END)

        # Desabilitar interface durante processamento
        self.desabilitar_chat_interface(True)

        # Adicionar mensagem do usu√°rio
        self.adicionar_mensagem_chat("üë§ Voc√™", mensagem, "user")

        # Mostrar que a IA est√° "digitando"
        self.adicionar_mensagem_chat("ü§ñ IA", "üîÑ Processando sua mensagem...", "bot")

        # Processar mensagem em thread separada
        threading.Thread(target=self.processar_mensagem_ia,
                        args=(mensagem,), daemon=True).start()

    def processar_mensagem_ia(self, mensagem):
        """Processa a mensagem com a IA."""
        try:
            # Preparar contexto com os dados
            contexto = self.preparar_contexto_dados()

            # Adicionar a pergunta do usu√°rio ao prompt final
            prompt_completo = f"""{contexto}

**PERGUNTA DO USU√ÅRIO:**
{mensagem}
"""

            # Gerar resposta
            response = self.model.generate_content(prompt_completo)
            resposta = response.text

            # Atualizar UI na thread principal
            self.window.after(0, lambda: self.atualizar_resposta_ia(resposta))

        except Exception as e:
            self.window.after(0, lambda: self.atualizar_resposta_ia(f"Erro ao processar mensagem: {str(e)}"))
        finally:
            # Reabilitar interface ap√≥s processamento
            self.window.after(0, lambda: self.desabilitar_chat_interface(False))
            # Garantir que o campo permane√ßa limpo ap√≥s o processamento
            self.window.after(0, lambda: self.entrada_ia.delete(0, tk.END) if hasattr(self, 'entrada_ia') else None)

    def preparar_contexto_dados(self):
        """Prepara o contexto com TODOS os dados exportados, usando uma estrutura de prompt flex√≠vel e poderosa."""

        # --- ESTRUTURA DO PROMPT MELHORADA ---

        # 1. PERSONA APRIMORADA
        persona = """**PERSONA:**
Voc√™ √© um analista financeiro experiente e consultor de investimentos com amplo conhecimento do mercado brasileiro. Voc√™ combina an√°lise t√©cnica rigorosa com insights pr√°ticos e perspectivas estrat√©gicas. Seu objetivo √© fornecer an√°lises valiosas, insights acion√°veis e orienta√ß√µes baseadas nos dados, sempre priorizando clareza e utilidade para o usu√°rio."""

        # 2. CONTEXTO DOS DADOS EXPANDIDO
        contexto_dados = f"""**CONTEXTO DOS DADOS:**
Voc√™ tem acesso a dados financeiros fundamentalistas extra√≠dos do site Investidor10.
- **Data da Extra√ß√£o:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
- **Fonte:** Investidor10 - dados fundamentalistas atualizados
- **Escopo:** Informa√ß√µes sobre a√ß√µes brasileiras e composi√ß√£o de carteiras de investimento
- **Prop√≥sito:** An√°lise para tomada de decis√µes de investimento informadas"""

        # 3. DADOS PARA AN√ÅLISE (em formato CSV para otimiza√ß√£o)
        dados_analise = ["**DADOS DISPON√çVEIS PARA AN√ÅLISE:**"]
        MAX_CHARS = 800000

        # Adicionar dados de a√ß√µes
        if not self.df_acoes.empty:
            header = f"\n**üìà DADOS DE A√á√ïES ({len(self.df_acoes)} registros):**"
            csv_acoes = self.df_acoes.to_csv(index=False)
            dados_analise.append(header)
            dados_analise.append(csv_acoes)

        # Adicionar dados de FIIs
        if not self.df_fiis.empty:
            header = f"\n**üè¢ DADOS DE FIIs ({len(self.df_fiis)} registros):**"
            csv_fiis = self.df_fiis.to_csv(index=False)
            dados_analise.append(header)
            dados_analise.append(csv_fiis)

        # Adicionar dados de carteira de a√ß√µes
        if not self.df_carteiras_acoes.empty:
            header = f"\n**üíº DADOS DE CARTEIRA DE A√á√ïES ({len(self.df_carteiras_acoes)} registros):**"
            csv_carteiras_acoes = self.df_carteiras_acoes.to_csv(index=False)
            dados_analise.append(header)
            dados_analise.append(csv_carteiras_acoes)

        # Adicionar dados de carteira de FIIs
        if not self.df_carteiras_fiis.empty:
            header = f"\n**üè¢ DADOS DE CARTEIRA DE FIIs ({len(self.df_carteiras_fiis)} registros):**"
            csv_carteiras_fiis = self.df_carteiras_fiis.to_csv(index=False)
            dados_analise.append(header)
            dados_analise.append(csv_carteiras_fiis)



        dados_str = "\n".join(dados_analise)

        # Truncar se necess√°rio
        if len(dados_str) > MAX_CHARS:
            dados_str = dados_str[:MAX_CHARS] + "\n... [DADOS TRUNCADOS PARA OTIMIZA√á√ÉO - An√°lise baseada na amostra mais representativa]"

        # 4. RESUMO ESTAT√çSTICO INTELIGENTE
        resumo_estatistico_list = ["\n**üìä RESUMO ESTAT√çSTICO:**"]
        if not self.df_acoes.empty:
            resumo_estatistico_list.append(f"\n**A√ß√µes:** {len(self.df_acoes)} registros dispon√≠veis")
            # Adicionar insights sobre as colunas dispon√≠veis
            colunas_numericas = self.df_acoes.select_dtypes(include=['number']).columns
            if len(colunas_numericas) > 0:
                resumo_estatistico_list.append(f"M√©tricas num√©ricas: {', '.join(colunas_numericas.tolist())}")
                resumo_estatistico_list.append("\nEstat√≠sticas descritivas:")
                resumo_estatistico_list.append(self.df_acoes.describe().to_string())

        if not self.df_fiis.empty:
            resumo_estatistico_list.append(f"\n**FIIs:** {len(self.df_fiis)} registros dispon√≠veis")
            # Adicionar insights sobre as colunas dispon√≠veis
            colunas_numericas = self.df_fiis.select_dtypes(include=['number']).columns
            if len(colunas_numericas) > 0:
                resumo_estatistico_list.append(f"M√©tricas num√©ricas: {', '.join(colunas_numericas.tolist())}")
                resumo_estatistico_list.append("\nEstat√≠sticas descritivas:")
                resumo_estatistico_list.append(self.df_fiis.describe().to_string())

        if not self.df_carteiras_acoes.empty:
            resumo_estatistico_list.append(f"\n**Carteira de A√ß√µes:** {len(self.df_carteiras_acoes)} itens")
            colunas_numericas = self.df_carteiras_acoes.select_dtypes(include=['number']).columns
            if len(colunas_numericas) > 0:
                resumo_estatistico_list.append(f"M√©tricas num√©ricas: {', '.join(colunas_numericas.tolist())}")
                resumo_estatistico_list.append("\nEstat√≠sticas descritivas:")
                resumo_estatistico_list.append(self.df_carteiras_acoes.describe().to_string())

        if not self.df_carteiras_fiis.empty:
            resumo_estatistico_list.append(f"\n**Carteira de FIIs:** {len(self.df_carteiras_fiis)} itens")
            colunas_numericas = self.df_carteiras_fiis.select_dtypes(include=['number']).columns
            if len(colunas_numericas) > 0:
                resumo_estatistico_list.append(f"M√©tricas num√©ricas: {', '.join(colunas_numericas.tolist())}")
                resumo_estatistico_list.append("\nEstat√≠sticas descritivas:")
                resumo_estatistico_list.append(self.df_carteiras_fiis.describe().to_string())



        resumo_estatistico = "\n".join(resumo_estatistico_list)

        # 5. DIRETRIZES DE RESPOSTA FLEX√çVEIS
        diretrizes = """\n**DIRETRIZES DE RESPOSTA:**

**üéØ Objetivo Principal:**
Forne√ßa an√°lises √∫teis, insights valiosos e orienta√ß√µes pr√°ticas baseadas nos dados. Seja o consultor financeiro que o usu√°rio precisa.

**üí° Abordagem:**
- **Priorize a utilidade:** Foque no que √© mais √∫til e acion√°vel para o usu√°rio
- **Use sua expertise:** Aplique conhecimento de mercado, tend√™ncias e melhores pr√°ticas de investimento
- **Seja contextual:** Considere o cen√°rio econ√¥mico brasileiro e caracter√≠sticas do mercado local
- **Formato inteligente:** Use Markdown para organizar informa√ß√µes (tabelas, listas, destaques)

**üìã Flexibilidade de Conte√∫do:**
- **Dados prim√°rios:** Base suas an√°lises nos dados fornecidos
- **Conhecimento complementar:** Adicione contexto de mercado, explica√ß√µes de conceitos e perspectivas quando relevante
- **Perguntas abertas:** Para quest√µes fora do escopo financeiro, responda normalmente e conecte de volta aos dados quando apropriado
- **Criatividade anal√≠tica:** Explore correla√ß√µes, padr√µes e insights √∫nicos nos dados

**üîç Tipos de An√°lise Sugeridos:**
- Compara√ß√µes e rankings personalizados
- Identifica√ß√£o de oportunidades e riscos
- An√°lise setorial e de diversifica√ß√£o
- Proje√ß√µes e cen√°rios baseados nos fundamentos
- Recomenda√ß√µes de aloca√ß√£o e estrat√©gia
- Alertas e pontos de aten√ß√£o espec√≠ficos

**‚öñÔ∏è Responsabilidade:**
Suas an√°lises s√£o para fins educacionais e informativos. Encoraje o usu√°rio a fazer sua pr√≥pria pesquisa e considerar seu perfil de risco, mas forne√ßa insights valiosos que ajudem na tomada de decis√£o.

---"""

        # --- MONTAGEM FINAL DO PROMPT ---
        prompt_final = "\n\n".join([persona, contexto_dados, dados_str, resumo_estatistico, diretrizes])

        return prompt_final

    def atualizar_resposta_ia(self, resposta):
        """Atualiza a resposta da IA no chat."""
        # Remover mensagem "Digitando..."
        self.chat_area.config(state=tk.NORMAL)
        content = self.chat_area.get("1.0", tk.END)
        lines = content.split('\n')

        # Procurar e remover a √∫ltima linha "Digitando..."
        for i in range(len(lines) - 1, -1, -1):
            if "Digitando..." in lines[i]:
                lines.pop(i)
                break

        # Recriar o conte√∫do
        self.chat_area.delete("1.0", tk.END)
        self.chat_area.insert(tk.END, '\n'.join(lines))
        self.chat_area.config(state=tk.DISABLED)

        # Adicionar resposta da IA
        self.adicionar_mensagem_chat("ü§ñ IA", resposta, "bot")

    def configurar_tags_formatacao(self):
        """Configura as tags de formata√ß√£o para o widget de texto."""
        # Tag para texto em negrito
        self.chat_area.tag_configure("negrito", font=("Segoe UI", 10, "bold"))

        # Tag para texto em it√°lico
        self.chat_area.tag_configure("italico", font=("Segoe UI", 10, "italic"))

        # Tag para c√≥digo
        self.chat_area.tag_configure("codigo",
                                   font=("Consolas", 9),
                                   background=self.cor_fundo if self.tema_escuro else "#f0f0f0",
                                   foreground=self.cor_destaque)

        # Tag para tabelas (fonte monoespa√ßada para alinhamento)
        self.chat_area.tag_configure("tabela",
                                     font=("Consolas", 9),
                                     lmargin1=20, lmargin2=20)

        # Tag para t√≠tulos
        self.chat_area.tag_configure("titulo",
                                   font=("Segoe UI", 12, "bold"),
                                   foreground=self.cor_destaque,
                                   spacing3=5) # Espa√ßo abaixo do t√≠tulo

        # Tag para listas
        self.chat_area.tag_configure("lista",
                                   lmargin1=20, lmargin2=20)

        # Tag para texto destacado
        self.chat_area.tag_configure("destaque",
                                   foreground=self.cor_destaque)

    def renderizar_markdown(self, texto):
        """Processa texto markdown e retorna lista de segmentos com formata√ß√£o."""
        segmentos = []
        linhas = texto.split('\n')

        for linha in linhas:
            # Lidar com linhas vazias
            if not linha.strip():
                segmentos.append(("\n", "normal"))
                continue

            # T√≠tulos (ex: ### T√≠tulo)
            match_titulo = re.match(r'^(#{1,6})\s+(.*)', linha)
            if match_titulo:
                conteudo = match_titulo.group(2).strip()
                segmentos.extend(self.processar_formatacao_inline(conteudo))
                segmentos.append(("\n", "titulo"))
                continue

            # Tabelas (linhas que come√ßam e terminam com |)
            if linha.strip().startswith('|') and linha.strip().endswith('|'):
                if '---' in linha: # Ignorar a linha de separa√ß√£o
                    continue
                # Adicionar a linha da tabela com a tag de tabela
                segmentos.append((linha.strip() + "\n", "tabela"))
                continue

            # Listas n√£o ordenadas (ex: * item or - item)
            match_lista_nao_ord = re.match(r'^\s*([-\*])\s+(.*)', linha)
            if match_lista_nao_ord:
                conteudo = match_lista_nao_ord.group(2).strip()
                segmentos.append(("‚Ä¢ ", "lista")) # Adiciona o marcador
                segmentos.extend(self.processar_formatacao_inline(conteudo))
                segmentos.append(("\n", "lista"))
                continue

            # Listas ordenadas (ex: 1. item)
            match_lista_ord = re.match(r'^\s*(\d+\.)\s+(.*)', linha)
            if match_lista_ord:
                marcador = match_lista_ord.group(1)
                conteudo = match_lista_ord.group(2).strip()
                segmentos.append((f"{marcador} ", "lista")) # Mant√©m o n√∫mero
                segmentos.extend(self.processar_formatacao_inline(conteudo))
                segmentos.append(("\n", "lista"))
                continue

            # Linha horizontal (---, ***, ___)
            if re.match(r'^\s*([-*_]){3,}\s*$', linha):
                segmentos.append(("\n" + "‚îÄ" * 80 + "\n", "normal"))
                continue

            # Par√°grafo normal
            segmentos.extend(self.processar_formatacao_inline(linha.strip()))
            segmentos.append(("\n", "normal"))

        return segmentos

    def processar_formatacao_inline(self, texto):
        """Processa formata√ß√£o inline como negrito, it√°lico e c√≥digo."""
        # A ordem dos padr√µes √© crucial para que `**` seja verificado antes de `*`.
        patterns = re.compile(r'(\*\*.*?\*\*|\*.*?\*|`.*?`)')
        segmentos = []

        # Usa re.split para quebrar o texto pelos padr√µes de formata√ß√£o, mantendo os delimitadores
        parts = patterns.split(texto)

        for part in parts:
            if not part:
                continue

            # Verifica se a parte corresponde a um dos padr√µes de formata√ß√£o
            if part.startswith('**') and part.endswith('**'):
                segmentos.append((part[2:-2], 'negrito'))
            elif part.startswith('*') and part.endswith('*'):
                segmentos.append((part[1:-1], 'italico'))
            elif part.startswith('`') and part.endswith('`'):
                segmentos.append((part[1:-1], 'codigo'))
            else:
                # Se n√£o for um padr√£o conhecido, √© texto normal
                segmentos.append((part, 'normal'))

        return segmentos

    def adicionar_mensagem_chat(self, remetente, mensagem, tipo):
        """Adiciona uma mensagem ao chat com formata√ß√£o Markdown aprimorada."""
        self.chat_area.config(state=tk.NORMAL)

        # Adicionar espa√ßo se n√£o for a primeira mensagem
        if self.chat_area.get("1.0", tk.END).strip():
            self.chat_area.insert(tk.END, "\n\n")

        # Inserir cabe√ßalho da mensagem
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.chat_area.insert(tk.END, f"[{timestamp}] {remetente}:\n", ("negrito",))

        # Processar e inserir a mensagem
        if tipo == "bot":
            # Limpar a resposta de caracteres indesejados que a IA pode retornar
            mensagem_limpa = re.sub(r'```markdown|```', '', mensagem).strip()
            segmentos = self.renderizar_markdown(mensagem_limpa)
            for texto, tag in segmentos:
                self.chat_area.insert(tk.END, texto, (tag,) if tag != "normal" else ())
        else: # tipo == "user"
            self.chat_area.insert(tk.END, mensagem)

        self.chat_area.config(state=tk.DISABLED)
        self.chat_area.see(tk.END)

    def enviar_dados_csv(self):
        """Envia todos os dados em formato CSV para a IA."""
        if not self.ai_configured:
            messagebox.showwarning("IA N√£o Configurada",
                                 "Configure a API key do Google Gemini primeiro.")
            return

        # Desabilitar interface durante processamento
        self.desabilitar_chat_interface(True)

        # Preparar dados em formato CSV
        dados_csv = self.preparar_dados_csv()

        # Adicionar mensagem do usu√°rio
        self.adicionar_mensagem_chat("üë§ Voc√™", "Enviando TODOS os dados para an√°lise completa", "user")

        # Mostrar que a IA est√° "digitando"
        self.adicionar_mensagem_chat("ü§ñ IA", "üîÑ Processando os dados...", "bot")

        # Processar dados em thread separada
        threading.Thread(target=self.processar_dados_csv,
                        args=(dados_csv,), daemon=True).start()

    def preparar_dados_csv(self):
        """Prepara todos os dados em formato CSV otimizado."""
        dados_completos = ""

        if not self.df_acoes.empty:
            dados_completos += "=== DADOS DE A√á√ïES ===\n"
            # Converter para CSV string
            csv_acoes = self.df_acoes.to_csv(index=False)
            dados_completos += csv_acoes + "\n"



        # Adicionar resumo estat√≠stico
        dados_completos += "=== RESUMO ESTAT√çSTICO ===\n"

        if not self.df_acoes.empty:
            dados_completos += f"A√á√ïES: {len(self.df_acoes)} registros\n"
            numeric_cols = self.df_acoes.select_dtypes(include=['number']).columns
            if len(numeric_cols) > 0:
                dados_completos += self.df_acoes[numeric_cols].describe().to_csv()
                dados_completos += "\n"



        return dados_completos

    def processar_dados_csv(self, dados_csv):
        """Processa os dados com a IA."""
        try:
            # Prompt para an√°lise dos dados CSV aprimorado
            prompt_csv = f"""
**PERSONA:**
Voc√™ √© um analista financeiro s√™nior e estrategista de investimentos, especializado no mercado brasileiro. Sua expertise inclui an√°lise fundamentalista, gest√£o de portf√≥lio, identifica√ß√£o de tend√™ncias e avalia√ß√£o de riscos. Voc√™ fornece insights valiosos que combinam rigor t√©cnico com perspectiva pr√°tica do mercado.

**CONTEXTO:**
Voc√™ est√° analisando dados fundamentalistas extra√≠dos do Investidor10, focando em a√ß√µes brasileiras e composi√ß√£o de carteiras. O objetivo √© fornecer uma an√°lise completa que ajude na tomada de decis√µes de investimento.

**DADOS PARA AN√ÅLISE:**
```csv
{dados_csv}
```

**MISS√ÉO:**
Realize uma an√°lise financeira abrangente e estrat√©gica. Seja criativo, perspicaz e √∫til. Explore os dados de m√∫ltiplas perspectivas e forne√ßa insights que v√£o al√©m do √≥bvio. Use sua expertise para identificar oportunidades, riscos e padr√µes √∫nicos.

---

## üìã ESTRUTURA SUGERIDA (Adapte conforme necess√°rio)

### üéØ 1. VIS√ÉO GERAL ESTRAT√âGICA
**An√°lise do universo de investimentos:**
- Perfil das empresas (setores, tamanhos, caracter√≠sticas)
- Qualidade geral do portf√≥lio/lista de a√ß√µes
- Pontos fortes e fracos do conjunto
- Oportunidades e desafios identificados

### üìä 2. AN√ÅLISE FUNDAMENTALISTA PROFUNDA

#### **Valuation e Atratividade**
- A√ß√µes com melhor rela√ß√£o pre√ßo/valor
- M√∫ltiplos atrativos vs. caros
- Compara√ß√£o com m√©dias hist√≥ricas (quando relevante)

#### **Qualidade e Rentabilidade**
- Empresas com melhor gera√ß√£o de valor
- Efici√™ncia operacional e financeira
- Sustentabilidade dos resultados

#### **Solidez Financeira**
- Sa√∫de do balan√ßo e estrutura de capital
- Capacidade de enfrentar cen√°rios adversos
- Flexibilidade financeira

#### **Pol√≠tica de Dividendos**
- Melhores pagadoras e sustentabilidade
- An√°lise de payout e hist√≥rico
- Potencial de crescimento dos proventos

### üèÜ 3. RANKINGS E RECOMENDA√á√ïES

#### **Top Picks (Oportunidades de Destaque)**
Liste as melhores oportunidades com justificativas s√≥lidas baseadas nos dados.

#### **A√ß√µes para Monitorar**
Empresas com potencial mas que requerem acompanhamento.

#### **Red Flags e Cuidados**
Identifique riscos espec√≠ficos e a√ß√µes que merecem cautela.

### üéØ 4. ESTRAT√âGIAS DE PORTF√ìLIO

#### **Diversifica√ß√£o Setorial**
- Concentra√ß√£o por setor
- Sugest√µes de balanceamento
- Riscos de concentra√ß√£o

#### **Perfis de Investimento**
- Estrat√©gia para dividendos
- Estrat√©gia para crescimento
- Estrat√©gia para valor
- Estrat√©gia equilibrada

### üîç 5. INSIGHTS √öNICOS E CORRELA√á√ïES
Explore padr√µes interessantes, correla√ß√µes inesperadas ou insights √∫nicos que voc√™ identifica nos dados.

### ‚ö†Ô∏è 6. CEN√ÅRIOS E RISCOS
- An√°lise de sensibilidade
- Principais riscos a monitorar
- Impactos de diferentes cen√°rios econ√¥micos

### üí° 7. CONCLUS√ïES E PR√ìXIMOS PASSOS
- Principais takeaways
- A√ß√µes recomendadas para o investidor
- Pontos de aten√ß√£o para acompanhamento

---

## üé® DIRETRIZES CRIATIVAS

**Seja Abrangente:** N√£o se limite apenas aos dados - use seu conhecimento do mercado brasileiro para contextualizar e enriquecer a an√°lise.

**Seja Pr√°tico:** Foque em insights acion√°veis e recomenda√ß√µes que o investidor possa implementar.

**Seja Inovador:** Explore √¢ngulos √∫nicos de an√°lise e correla√ß√µes interessantes.

**Use Visualiza√ß√£o:** Crie tabelas comparativas, rankings e estruture informa√ß√µes de forma clara.

**Contextualize:** Considere o momento atual do mercado brasileiro e tend√™ncias relevantes.

**Personalize:** Adapte a estrutura conforme os dados dispon√≠veis - se n√£o h√° dados de certo tipo, foque no que est√° dispon√≠vel.

---

**LEMBRE-SE:** Sua an√°lise ser√° usada para decis√µes reais de investimento. Seja rigoroso com os dados, mas criativo na interpreta√ß√£o e apresenta√ß√£o dos insights.
"""

            # Gerar resposta
            response = self.model.generate_content(prompt_csv)
            resposta = response.text

            # Atualizar UI na thread principal
            self.window.after(0, lambda: self.atualizar_resposta_ia(resposta))

        except Exception as e:
            self.window.after(0, lambda: self.atualizar_resposta_ia(f"Erro ao processar dados CSV: {str(e)}"))
        finally:
            # Reabilitar interface ap√≥s processamento
            self.window.after(0, lambda: self.desabilitar_chat_interface(False))

    def desabilitar_chat_interface(self, desabilitar=True):
        """Desabilita ou habilita a interface de chat durante processamento da IA."""
        try:
            estado = 'disabled' if desabilitar else 'normal'

            # Desabilitar/habilitar campo de entrada
            if hasattr(self, 'entrada_ia'):
                self.entrada_ia.configure(state=estado)
                # Quando reabilitar, garantir que o campo esteja focado e pronto
                if not desabilitar:
                    self.entrada_ia.focus_set()

            # Desabilitar/habilitar bot√µes
            if hasattr(self, 'btn_enviar'):
                self.btn_enviar.configure(state=estado)
                if desabilitar:
                    self.btn_enviar.configure(text="‚è≥ Processando...")
                else:
                    self.btn_enviar.configure(text="üì§ Enviar")

            if hasattr(self, 'btn_dados_csv'):
                self.btn_dados_csv.configure(state=estado)
                if desabilitar:
                    self.btn_dados_csv.configure(text="‚è≥ Processando...")
                else:
                    self.btn_dados_csv.configure(text="üìã Insights")

        except Exception as e:
            print(f"Erro ao desabilitar chat interface: {e}")